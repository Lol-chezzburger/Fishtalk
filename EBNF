Absolutely! I understand that anything inside `--=[ ... ]=--` is a comment or manual section and should be ignored by the parserâ€”these lines are not code statements.

Below is an EBNF grammar for your "FishtalkCode" main file, based on your provided code and command list. This grammar skips lines/blocks that are comment/manual sections and describes the structure and syntax for the actual code.

---

```ebnf
(* The main program structure: a sequence of statements and/or section headers/comments *)
program            = { statement } ;

(* A statement is one of the following: *)
statement          = manual_comment
                   | function_def
                   | header_command
                   | wait_command
                   | print_command
                   | function_start
                   | conditional_command
                   | end_command
                   | color_command
                   | variable_assign
                   | unit_command
                   | summon_command
                   | search_command
                   | math_command
                   | sleep_command
                   | breathing_command
                   | error_command
                   | empty_line ;

(* Manual/explanation sections, to be ignored by parser *)
manual_comment     = "--=[", { any_char_excluding("]=--") }, "]=--" ;

(* Function definition *)
function_def       = "fish:{", identifier, "}:", { indented_statement } ;

indented_statement = indent, statement ;

(* Header line (for section titles or output) *)
header_command     = header_level, "-", "(", identifier, ")", "=:[", text, "]:" ;
header_level       = "h1" | "h2" | "h3" ;

(* Wait command *)
wait_command       = "fsttvr(", number, ")" ;

(* Print command *)
print_command      = "rone=:[" , text , "]:" ;

(* Start a new function block *)
function_start     = "begun+:{", identifier, "}:" ;

(* Conditional commands *)
conditional_command = ("+==+" | "+=/+"), "status=:[" , status, "]:" , "(" , action , ")" ;

(* End commands *)
end_command        = "sleepsineloop" | "sleepcosloop" ;

(* Paint/color command *)
color_command      = "paintR(", number, ")G(", number, ")B(", number, ")" ;

(* Variable assignment and unit selection *)
variable_assign    = "convert", identifier, "=", unit_command ;
unit_command       = "unitused(", identifier, "-", identifier, ")" ;

(* Summon a 3D/2D shape or mesh *)
summon_command     = "summon{", identifier, "}:[", identifier, "]:-{local:", number, ",", number, ",", number, "}-" ;

(* Search command *)
search_command     = "search(", identifier, ")" ;

(* Math/random command *)
math_command       = "mathrandom" , ( "X" | "Y" | "Z" ), "(", number, ",", number, ")", "unit:\"", identifier, "\"" ;

(* Breathing and error commands *)
breathing_command  = "breathingat(", number, ")bpm" ;
error_command      = "errorjustify:(", number, "):"
                   | "errortick(", number, ")" ;

(* Status and action for conditional commands *)
status             = "failed" | "passed" ;
action             = "forward" | "plynextsleep" ;

(* Terminals *)
identifier         = letter, { letter | digit | "_" } ;
number             = digit, { digit } | digit, { digit }, ".", { digit } ;
text               = { any_char_excluding("]:") } ;
indent             = "  " | "\t" ;
empty_line         = { whitespace }, newline ;

(* Basic character definitions *)
letter             = "A".."Z" | "a".."z" ;
digit              = "0".."9" ;
whitespace         = " " | "\t" ;
newline            = "\n" | "\r\n" ;
any_char_excluding(x) = ? any character except those in x ? ;

```

---

**Notes:**
- Anything within `--=[ ... ]=--` is matched by `manual_comment` and ignored.
- All main commands and function structures are included.
- Indented statements (within functions) are handled.
- Identifiers, numbers, text, and more complex constructs are broken out as terminals.
- You can expand or adapt this grammar as your language grows!

You can paste this into your EBNF file. If you want a more compact or differently organized version, just let me know!
