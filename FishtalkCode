--=[basics]=--
h3-(TimesNewRoman)=:[FISHtalk]:

fish:{printfunction}:
  fsttvr(1)
    rone=:[Hello world!]:
  fsttvr(1)
begun+:{paintfunction}:
+=/+status=:[failed]:(forward)
sleepsineloop

fish:{failed}:
  rone=:[failed???]:
sleepsineloop

--=[Colours section]=--
fish:{paintfunction}:
  paintR(20)G(50)B(10)
sleepsineloop

--=[basic commands list]=--
--=[
"--=[text]=--" the ignore this command, anything in it gets ignored.
"h1/2/3-(font)=:[text]:" prints text in brackets as a header. (only seen in the code)
"fish:{text}:" is the function head
"fsttvr(#)" is the wait command
"rone=:[text]:" prints text in brackets
"begun+:{text}:" starts a new function while reading the code.
"+==+status=:[failed/passed]:(forward/plynextsleep)" is like "if true then"
"+=/+status=:[failed/passed]:(forward/plynextsleep)" is like "if false then"
"sleepsineloop" end without looping
"paintR(#)G(#)B(#)" prints a colour
]=--

 --=[more advanced?]=--
convert ID1 = unitused(imperial-inch)
fish:{spawnshapefunction}:
  summon{shape3d}:[square]:-{local:0,0,0:}-
fsttvr(2.9)
sleepsineloop

fish:{shapesize}:
search(square)
+==+status=:[failed/passed]:(forward/plynextsleep)
mathrandomX(-5,5)unit:"ID1"
mathrandomY(-5,5)unit:"ID1"
mathrandomZ(-5,5)unit:"ID1"
sleepcosloop

breathingat(2.8)bpm
errorjustify:(3):
errortick(3)
--=[next set of commands]=--
--=[
"convert text = variable" saves code to run as a text name, needs to have code activate it to run
"unitused(system-unittype)" picks that system to use as the type (metric or imperal) and uses the unittype as the unit base (centimeter(metric) or inch(imperial))
"summon{shape3d/shape2d/mesh}:[square/shpere/cylinder/cube/wedge/meshname]:-{local:x,y,z}-" can summon a shape or mesh (requires a 3d and/or 2d space to work)
"search(item/file)" can be used to find files or shapes (shapes require a 3d or 2d space)
"mathrandomize(#,#)" makes a random number. add X, Y, or Z before brackets to change in one direction, add 'unit:' to the end for size or position changes 
"sleepcosloop" end with looping, dependent on 'breathingat(#)bpm'
"breathingat(#)bpm" any code using the 'sleepcosloop' will update at this speed as the minimum wait time. any function going too fast for this will be forced to wait.
"errorjustify:(#):" the tolerance of error offput dependent on 'breathingat(#)bpm', can't be lower then the 'breathingat(#)bpm' var. If a function is not updating after the breathing but after the error, it will add a error tick. 
"errortick(#)" number of times that the error can happen before stoping all processes.
]=--
